trigger:
  batch: true
  branches:
    include:
      - "*"
  # excluding these paths as this build will be trigged after gems-node-modules-image build is completed.
  paths:
    exclude:
      - Gemfile
      - Gemfile.lock
      - package.json
      - yarn.lock

pr:
  branches:
    include:
      - master
  # excluding these paths as this build will be trigged after gems-node-modules-image build is completed.
  paths:
    exclude:
      - Gemfile
      - Gemfile.lock
      - package.json
      - yarn.lock

variables:
- group: Docker Shared variables
- group: APPLY - Shared Variables
- name: imageName
  value: 'apply-for-teacher-training'
- name: gemsNodeModulesImageName
  value: 'apply-for-teacher-training-gems-node-modules'
- name: debug
  value: true
- name: deployOnly
  value: false
- name: buildCancelled
  value: false
- name: disable.coverage.autogenerate
  value: true

stages:
- stage: build_release
  displayName: 'Build & Publish Docker Image'
  variables:
  - group: APPLY - ENV - QA
  jobs:
  - job: build_docker_image
    displayName: 'Build Docker Image'
    cancelTimeoutInMinutes: 1
    condition: eq(variables['deployOnly'], false)
    pool:
      vmImage: 'Ubuntu-16.04'

    variables:
    - name: system.debug
      value: $(debug)

    steps:
    - script: |
        GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
        GEM_NODE_PACKAGE_FILES_SHA=$(sha1sum Gemfile Gemfile.lock Dockerfile package.json yarn.lock)
        echo $GEM_NODE_PACKAGE_FILES_SHA
        DEPENDENCIES_SHA=$(echo $GEM_NODE_PACKAGE_FILES_SHA | sha1sum | cut -c 1-7)
        echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
        echo '##vso[task.setvariable variable=COMPOSE_FILE]docker-compose.yml:docker-compose.azure.yml'
        docker_path=$(dockerHubUsername)/$(imageName)
        echo "##vso[task.setvariable variable=docker_path]$docker_path"

        DEPENDENCIES_PACKAGE_IMAGE=$(dockerHubUsername)/$(gemsNodeModulesImageName):$DEPENDENCIES_SHA
        docker pull $DEPENDENCIES_PACKAGE_IMAGE || DEPENDENCIES_PACKAGE_IMAGE=$(gemsNodeModulesImageName)
        echo "##vso[task.setvariable variable=gemsNodeModulesImageName]$DEPENDENCIES_PACKAGE_IMAGE"
        echo "##[command]$DEPENDENCIES_PACKAGE_IMAGE"
      displayName: 'Configure build environment'

    - template: templates/cancel-build-if-not-latest.yml
      parameters:
        sourceBranchName: $(Build.SourceBranchName)

    - script: |
         make build
      displayName: 'Build Docker image'
      condition: and(eq(variables['buildCancelled'], false), and(succeeded(), eq(variables['deployOnly'], false)))
      env:
        DOCKER_BUILDKIT: $(dockerBuildkitState)
        COMPOSE_DOCKER_CLI_BUILD: $(dockerBuildkitState)
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        dockerHubImageTag: $(Build.BuildNumber)
        gemsNodeModulesImageName: $(gemsNodeModulesImageName)
        railsSecretKeyBase: $(railsSecretKeyBase)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

    - task: PublishPipelineArtifact@1
      displayName: 'Publish ARM template artifacts'
      condition: and(eq(variables['buildCancelled'], false), and(succeeded(), eq(variables['deployOnly'], false)))
      inputs:
        path: '$(System.DefaultWorkingDirectory)/azure/'
        artifactName: 'arm_template'

    - template: templates/cancel-build-if-not-latest.yml
      parameters:
        sourceBranchName: $(Build.SourceBranchName)

    - task: Docker@2
      displayName: Login to DockerHub
      condition: and(eq(variables['buildCancelled'], false), and(succeeded(), eq(variables['deployOnly'], false)))
      inputs:
        containerRegistry: 'DfE Docker Hub'
        command: 'login'

    - task: Docker@2
      displayName: Push image to DockerHub
      condition: and(eq(variables['buildCancelled'], false), and(succeeded(), eq(variables['deployOnly'], false)))
      inputs:
        containerRegistry: 'DfE Docker Hub'
        repository: '$(dockerHubUsername)/$(imageName)'
        command: 'push'
        tags: |
          $(Build.BuildNumber)

    - script: |
        docker tag $(dockerHubUsername)/$(imageName):$(Build.BuildNumber) $(dockerHubUsername)/$(imageName):latest
        docker rmi $(dockerHubUsername)/$(imageName):$(Build.BuildNumber)
      displayName: Tag image as latest (if master)
      condition: and(eq(variables['buildCancelled'], false), and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')))

    - task: Docker@2
      displayName: Push image (latest) to DockerHub
      condition: and(eq(variables['buildCancelled'], false), and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
      inputs:
        containerRegistry: 'DfE Docker Hub'
        repository: '$(dockerHubUsername)/$(imageName)'
        command: 'push'
        tags: |
          latest

    - task: Docker@2
      displayName: Logout of DockerHub
      condition: and(succeeded(), eq(variables['deployOnly'], false))
      inputs:
        containerRegistry: 'DfE Docker Hub'
        command: 'logout'


- stage: test_release
  displayName: 'Run Tests'
  dependsOn: build_release
  variables:
  - group: APPLY - ENV - QA
  jobs:
  - job: test_docker_image_batch_1
    displayName: 'Rubocop & Brakeman'
    condition: and(succeeded(), eq(variables['deployOnly'], false))
    pool:
      vmImage: 'Ubuntu-16.04'

    variables:
    - name: system.debug
      value: $(debug)

    steps:
    - script: |
        echo '##vso[task.setvariable variable=COMPOSE_FILE]docker-compose.yml:docker-compose.azure.yml'
      displayName: 'Configure environment'

    - template: templates/cancel-build-if-not-latest.yml
      parameters:
        sourceBranchName: $(Build.SourceBranchName)

    - script: |
        docker pull $(dockerHubUsername)/$(imageName):$(Build.BuildNumber)
        make az_setup
      displayName: 'Load Docker image & setup container'
      env:
        DOCKER_BUILDKIT: $(dockerBuildkitState)
        COMPOSE_DOCKER_CLI_BUILD: $(dockerBuildkitState)
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        dockerHubImageTag: $(Build.BuildNumber)
        railsSecretKeyBase: $(railsSecretKeyBase)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

    - template: templates/cancel-build-if-not-latest.yml
      parameters:
        sourceBranchName: $(Build.SourceBranchName)

    - script: make ci.lint-ruby
      name: ci_lint_ruby
      displayName: 'Rubocop'
      env:
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        dockerHubImageTag: $(Build.BuildNumber)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

    - script: make ci.brakeman
      name: ci_brakeman
      displayName: 'Brakeman'
      env:
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        dockerHubImageTag: $(Build.BuildNumber)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

  - template: templates/rspec-job.yml
    parameters:
      testCommand: 'integration-tests'
      displayName: 'Integration Tests with all features off'
      jobId: 'integration_tests_features_off'
      jobAttempt: $(System.JobAttempt)
      featureFlagState: 'off'

  - template: templates/rspec-job.yml
    parameters:
      testCommand: 'unit-tests'
      displayName: 'Unit Tests with all features off'
      jobId: 'unit_tests_features_off'
      jobAttempt: $(System.JobAttempt)
      featureFlagState: 'off'

  - template: templates/rspec-job.yml
    parameters:
      testCommand: 'integration-tests'
      displayName: 'Integration Tests with all features on'
      jobId: 'integration_tests_features_on'
      jobAttempt: $(System.JobAttempt)
      featureFlagState: 'on'

  - template: templates/rspec-job.yml
    parameters:
      testCommand: 'unit-tests'
      displayName: 'Unit Tests with all features on'
      jobId: 'unit_tests_features_on'
      jobAttempt: $(System.JobAttempt)
      featureFlagState: 'on'


- stage: deploy_qa
  displayName: 'Deploy - QA'
  dependsOn: build_release
  variables:
  - group: APPLY - ENV - QA
  jobs:
  - template: templates/deploy.yml
    parameters:
      debug: $(debug)
      subscriptionPrefix: 's106'
      subscriptionName: 'Apply (106) - Dev'
      environment: 'qa'
      resourceEnvironmentName: 'd01'
      serviceName: 'apply'
      redisCacheSKU: 'Premium'
      redisCacheFamily: 'P'
      containerImageReference: '$(dockerHubUsername)/$(imageName):$(build.buildNumber)'
      databaseName: 'apply'
      databaseUsername: 'applyadm512'
      databasePassword: '$(databasePassword)'
      databaseStorageAutoGrow: 'disabled'
      databaseBackupRetentionDays: 7
      dockerhubUsername: '$(dockerHubUsername)'
      containerStartTimeLimit: '$(appServiceContainerTimeoutSeconds)'
      railsSecretKeyBase: '$(railsSecretKeyBase)'
      railsEnv: 'production'
      basicAuthEnabled: '$(basicAuthEnabled)'
      basicAuthUsername: '$(basicAuthUsername)'
      basicAuthPassword: '$(basicAuthPassword)'
      supportUsername: '$(supportUsername)'
      supportPassword: '$(supportPassword)'
      authorisedHosts: '$(authorisedHosts)'
      sentryDSN: '$(sentryDSN)'
      logstashEnable: '$(logstashEnable)'
      logstashRemote: '$(logstashRemote)'
      logstashHost: '$(logstashHost)'
      logstashPort: '$(logstashPort)'
      logstashSsl: '$(logstashSsl)'
      govukNotifyAPIKey: '$(govukNotifyAPIKey)'
      findBaseUrl: '$(findBaseUrl)'
      dfeSignInClientId: '$(dfeSignInClientId)'
      dfeSignInSecret: '$(dfeSignInSecret)'
      dfeSignInIssuer: '$(dfeSignInIssuer)'
      stateChangeSlackUrl: '$(stateChangeSlackUrl)'
      customAvailabilityMonitors: '$(customAvailabilityMonitors)'
      alertRecipientEmails: '$(alertRecipientEmails)'
      alertSlackChannel: '$(alertSlackChannel)'
      govukNotifyCallbackAPIKey: $(govukNotifyCallbackAPIKey)
      dsiApiUrl: '$(dsiApiUrl)'
      dsiApiSecret: '$(dsiApiSecret)'
      ucasUsername: '$(ucasUsername)'
      ucasPassword: '$(ucasPassword)'
      ucasZipPassword: '$(ucasZipPassword)'
      sandbox: '$(sandbox)'
      skylightAuthToken: '$(skylightAuthToken)'
      skylightEnable: $(skylightEnable)


- stage: deploy_devops
  dependsOn: build_release
  displayName: 'Deploy - DevOps'
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables.devDeployBranchNameOverride))
  variables:
  - group: APPLY - ENV - DevOps
  jobs:
  - template: templates/deploy.yml
    parameters:
      debug: $(debug)
      subscriptionPrefix: 's106'
      subscriptionName: 'Apply (106) - Dev'
      environment: 'devops'
      resourceEnvironmentName: 'd02'
      serviceName: 'apply'
      ${{ if eq(variables['deployOnly'], true) }}:
        containerImageReference: '$(dockerHubUsername)/$(imageName):latest'
      ${{ if eq(variables['deployOnly'], false) }}:
        containerImageReference: '$(dockerHubUsername)/$(imageName):$(build.buildNumber)'
      databaseName: 'apply'
      databaseUsername: 'applyadm512'
      databasePassword: '$(databasePassword)'
      databaseStorageAutoGrow: 'disabled'
      databaseBackupRetentionDays: 7
      dockerhubUsername: '$(dockerHubUsername)'
      containerStartTimeLimit: '$(appServiceContainerTimeoutSeconds)'
      railsSecretKeyBase: '$(railsSecretKeyBase)'
      railsEnv: 'production'
      basicAuthEnabled: '$(basicAuthEnabled)'
      basicAuthUsername: '$(basicAuthUsername)'
      basicAuthPassword: '$(basicAuthPassword)'
      supportUsername: '$(supportUsername)'
      supportPassword: '$(supportPassword)'
      authorisedHosts: '$(authorisedHosts)'
      sentryDSN: '$(sentryDSN)'
      logstashEnable: '$(logstashEnable)'
      logstashRemote: '$(logstashRemote)'
      logstashHost: '$(logstashHost)'
      logstashPort: '$(logstashPort)'
      logstashSsl: '$(logstashSsl)'
      govukNotifyAPIKey: '$(govukNotifyAPIKey)'
      findBaseUrl: '$(findBaseUrl)'
      dfeSignInClientId: '$(dfeSignInClientId)'
      dfeSignInSecret: '$(dfeSignInSecret)'
      dfeSignInIssuer: '$(dfeSignInIssuer)'
      stateChangeSlackUrl: '$(stateChangeSlackUrl)'
      customAvailabilityMonitors: '$(customAvailabilityMonitors)'
      alertRecipientEmails: '$(alertRecipientEmails)'
      alertSlackChannel: '$(alertSlackChannel)'
      govukNotifyCallbackAPIKey: '$(govukNotifyCallbackAPIKey)'
      dsiApiUrl: '$(dsiApiUrl)'
      dsiApiSecret: '$(dsiApiSecret)'
      ucasUsername: '$(ucasUsername)'
      ucasPassword: '$(ucasPassword)'
      ucasZipPassword: '$(ucasZipPassword)'
      sandbox: '$(sandbox)'
      skylightAuthToken: '$(skylightAuthToken)'
      skylightEnable: $(skylightEnable)
