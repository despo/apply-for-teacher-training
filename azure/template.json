{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceEnvironmentName": {
            "type": "string",
            "metadata": {
                "description": "The environment of the resource."
            }
        },
        "serviceName": {
            "type": "string",
            "metadata": {
                "description": "The abbreviation of the service name to be used when naming a resource."
            }
        },
        "environment": {
            "type": "string",
            "metadata": {
                "description": "The hosting environment (qa, production, sandbox, etc)"
            }
        },
        "dockerHubUsername": {
            "type": "string",
            "metadata": {
                "description": "the username associated with the dockerhub account"
            }
        },
        "containerImageReference": {
            "type": "string",
            "metadata": {
                "description": "The container image to pull from the server. Should be in image:tag format."
            }
        },
        "railsEnv": {
            "type": "string",
            "defaultValue": "production",
            "metadata": {
                "description": "Environment for the rails app."
            }
        },
        "redisCacheSKU": {
            "type": "string",
            "metadata": {
                "description": "Redis Cache service tier."
            },
            "allowedValues": [
              "Basic",
              "Standard",
              "Premium"
            ]
        },
        "redisCacheFamily": {
            "type": "string",
            "metadata": {
                "description": "Redis Cache family, C for basic/standard and P for premium."
            },
            "allowedValues": [
              "C",
              "P"
            ]
        },
        "redisCacheCapacity": {
            "type": "int",
            "metadata": {
                "description": "Redis Cache capacity, the larger the number the more performant the cache. For premium this value can only be from 1-5."
            },
            "minValue": 0,
            "maxValue": 6
        },
        "ciClockCpus": {
            "type": "string",
            "metadata": {
                "description": "The number of CPU cores allocated to the Clock service container instance."
            }
        },
        "ciClockMemory": {
            "type": "string",
            "metadata": {
                "description": "The amount of memory (in GB) allocated to the Clock service container instance."
            }
        },
        "ciWorkerCpus": {
            "type": "string",
            "metadata": {
                "description": "The number of CPU cores allocated to the Worker service container instance."
            }
        },
        "ciWorkerMemory": {
            "type": "string",
            "metadata": {
                "description": "The amount of memory (in GB) allocated to the Worker service container instance."
            }
        },
        "databaseName": {
            "type": "string",
            "metadata": {
                "description": "The name of the postgres database"
            }
        },
        "databaseUsername": {
            "type": "string",
            "metadata": {
                "description": "The username used to connect to the database."
            }
        },
        "databasePassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password used to connect to the database."
            }
        },
        "databaseStorageAutoGrow": {
            "type": "string",
            "metadata": {
                "description": "Used to enable or disable autogrow on the database storage."
            }
        },
        "databaseBackupRetentionDays": {
            "type": "int",
            "metadata": {
                "description": "Used to configure the number of days the database backups will be retained for."
            }
        },
        "securityAlertEmail": {
            "type": "string",
            "metadata": {
                "description": "Email address for psql security alerts"
            }
        },
        "secretKeyBase": {
            "type": "string",
            "metadata": {
                "description": "Secret key base for rails"
            }
        },
        "containerStartTimeLimit": {
            "type": "string",
            "metadata": {
                "description": "Time limit in seconds, up to 1800s, that the appService will wait for the container to start."
            }
        },
        "warmupPingPath": {
            "type": "string",
            "metadata": {
                "description": "The path to ping during webapp warmup process, prior to slot swap."
            }
        },
        "warmupPingStatus": {
            "type": "string",
            "metadata": {
                "description": "The permitted status codes to indicate a successful app warmup."
            }
        },
        "govukNotifyAPIKey": {
            "type": "string",
            "metadata": {
                "description": "GOV.UK Notify service API key."
            }
        },
        "basicAuthEnabled": {
            "type": "string",
            "metadata": {
                "description": "If basic auth is enabled. '1' for enabled, anything else for not."
            }
        },
        "basicAuthUsername": {
            "type": "string",
            "metadata": {
                "description": "Basic Auth Username for the entire site except API routes"
            }
        },
        "basicAuthPassword": {
            "type": "string",
            "metadata": {
                "description": "Basic Auth Password for the entire site except API routes"
            }
        },
        "supportUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the support section of the site"
            }
        },
        "supportPassword": {
            "type": "string",
            "metadata": {
                "description": "Password for the support section of the site"
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "The name of the key vault."
            }
        },
        "keyVaultResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "The resource group for the key vault."
            }
        },
        "authorisedHosts": {
            "type": "string",
            "metadata": {
                "description": "Comma seperated list of FQDNs authorised to access the app."
            }
        },
        "customHostName": {
            "type": "string",
            "metadata": {
                "description": "The top level common domain for the service, e.g. apply-for-teacher-training.education.gov.uk."
            }
        },
        "railsServeStaticFiles": {
            "type": "string",
            "defaultValue": "true",
            "metadata": {
                "description": "Serve static files."
            }
        },
        "sentryDSN": {
            "type": "string",
            "metadata": {
                "description": "Sentry client key."
            }
        },
        "logstashEnable": {
            "type": "string",
            "metadata": {
                "description": "Set this to 'true' to log to STDOUT in logstash format."
            }
        },
        "logstashRemote": {
            "type": "string",
            "metadata": {
                "description": "Set this to 'true' to ship logstash logs to remote server. Requires LOGSTASH_ENABLED == 'true'."
            }
        },
        "logstashHost": {
            "type": "string",
            "metadata": {
                "description": "Logstash/Logit Host to send logs to."
            }
        },
        "logstashPort": {
            "type": "string",
            "metadata": {
                "description": "Logstash/Logit Port to send logs to."
            }
        },
        "logstashSsl": {
            "type": "string",
            "metadata": {
                "description": "Set this to 'true' to use SSL when shipping logs."
            }
        },
        "findBaseUrl": {
            "type": "string",
            "metadata": {
                "description": "The base URL to manage-courses-backend, Find's backend."
            }
        },
        "appsignalKey": {
            "type": "string",
            "metadata": {
                "description": "The Appsignal API key"
            }
        },
        "redisCacheName": {
            "type": "string",
            "metadata": {
                "description": "Redis URL prefix name."
            }
        },
        "containerInstanceNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "The name prefix for the background worker container instances."
            }
        },
        "dfeSignInClientId": {
            "type": "string",
            "metadata": {
                "description": "The DfE Sign-in client ID, obtained from the DfE Sign in management interface"
            }
        },
        "dfeSignInSecret": {
            "type": "string",
            "metadata": {
                "description": "The DfE Sign-in secret, obtained from the DfE sign-in management interface"
            }
        },
        "dfeSignInIssuer": {
            "type": "string",
            "metadata": {
                "description": "The URL of the DfE Sign-in OIDC interface (differs for test, pre-prod and prod)"
            }
        },
        "stateChangeSlackUrl": {
            "type": "string",
            "metadata": {
                "description": "Set this to a Slack incoming webhook url for application state change notifications"
            }
        },
        "customAvailabilityMonitors": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of paths to perform monitoring on. In form TEST_NAME:HOST where HOST is the complete URL minus the http(s):// prefix."
            }
        },
        "alertRecipientEmails": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of recipients to receive availability email alerts. In form NAME:EMAIL_ADDRESS."
            }
        }
    },
    "variables": {
        "deploymentUrlBase": "https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/master/templates/",
        "appServiceRuntimeStack": "[concat('DOCKER|', parameters('dockerHubUsername'), '/', parameters('containerImageReference'))]",
        "containerImageName": "[concat(parameters('dockerHubUsername'), '/', parameters('containerImageReference'))]",
        "resourceNamePrefix": "[toLower(concat('s106', parameters('resourceEnvironmentName'),'-', parameters('serviceName')))]",
        "appServiceName": "[concat(variables('resourceNamePrefix'), '-as')]",
        "appServicePlanName": "[concat(variables('resourceNamePrefix'), '-asp')]",
        "storageAccountName": "[replace(concat(variables('resourceNamePrefix'), 'str'), '-', '')]",
        "databaseServerName": "[concat(variables('resourceNamePrefix'), '-psql')]",
        "keyVaultCertificateName": "[replace(parameters('customHostName'), '.', '-')]",
        "rubyAuthHosts": "[if(greater(length(parameters('customHostName')), 0), concat(parameters('authorisedHosts'), ',', parameters('customHostName')), parameters('authorisedHosts'))]",
        "defaultAvailabilityCheckHosts": "[if(greater(length(parameters('customHostName')), 0), createArray(concat('azcheck:', variables('appServiceName'), '.azurewebsites.net/check'), concat('check:', parameters('customHostName'), '/check')), createArray(concat('azcheck:', variables('appServiceName'), '.azurewebsites.net/check')))]",
        "availabilityCheckHosts": "[if(greater(length(parameters('customAvailabilityMonitors')), 0), concat(variables('defaultAvailabilityCheckHosts'), parameters('customAvailabilityMonitors')), variables('defaultAvailabilityCheckHosts'))]",
        "copy": [
            {
                "name": "availabilityTests",
                "count": "[length(variables('availabilityCheckHosts'))]",
                "input": {
                    "nameSuffix": "[split(variables('availabilityCheckHosts')[copyIndex('availabilityTests')], ':')[0]]",
                    "url": "[concat('https://', split(variables('availabilityCheckHosts')[copyIndex('availabilityTests')], ':')[1])]",
                    "guid": "[guid(variables('availabilityCheckHosts')[copyIndex('availabilityTests')])]"
                }
            }
        ]
    },
    "resources": [
        {
            "name": "storage-account",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'storage-account.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    }
                }
            }
        },
	{
            "name": "redis-cache",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'redis.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "redisCacheName": {
                        "value": "[parameters('redisCacheName')]"
                    },
                    "redisCacheSKU": {
                        "value": "[parameters('redisCacheSKU')]"
                    },
                    "redisCacheFamily": {
                        "value": "[parameters('redisCacheFamily')]"
                    },
                    "redisCacheCapacity": {
                        "value": "[parameters('redisCacheCapacity')]"
                    },
                    "enableNonSslPort": {
                        "value": true
                    }
                }
            }
        },
        {
            "name": "app-service-plan",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'app-service-plan.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "appServicePlanTier": {
                        "value": "Standard"
                    },
                    "appServicePlanSize": {
                        "value": "2"
                    }
                }
            }
        },
        {
            "name": "app-service-certificate",
            "type": "Microsoft.Resources/deployments",
            "condition": "[greater(length(parameters('customHostName')), 0)]",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'app-service-certificate.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultCertificateName": {
                        "value": "[variables('keyVaultCertificateName')]"
                    },
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "keyVaultResourceGroup": {
                        "value": "[parameters('keyVaultResourceGroup')]"
                    }
                }
            }
        },
        {
            "name": "app-service",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'app-service-linux.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appServiceName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "appServicePlanResourceGroup": {
                        "value": "[resourceGroup().name]"
                    },
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "customHostName": {
                        "value": "[parameters('customHostName')]"
                    },
                    "certificateThumbprint": {
                        "value": "[if(greater(length(parameters('customHostName')), 0), reference('app-service-certificate', '2018-11-01').outputs.certificateThumbprint.value, '')]"
                    },
                    "runtimeStack": {
                        "value": "[variables('appServiceRuntimeStack')]"
                    },
                    "appServiceAppSettings": {
                        "value": [
                            {
                                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                                "value": "[reference('app-insights').outputs.instrumentationKey.value]"
                            },
                            {
                                "name": "RAILS_ENV",
                                "value": "[parameters('railsEnv')]"
                            },
                            {
                                "name": "DB_HOSTNAME",
                                "value": "[reference('postgresql-server').outputs.fullyQualifiedDomainName.value]"
                            },
                            {
                                "name": "DB_USERNAME",
                                "value": "[concat(parameters('databaseUsername'), '@', variables('databaseServerName'))]"
                            },
                            {
                                "name": "DB_PASSWORD",
                                "value": "[parameters('databasePassword')]"
                            },
                            {
                                "name": "DB_DATABASE",
                                "value": "[parameters('databaseName')]"
                            },
                            {
                                "name": "SECRET_KEY_BASE",
                                "value": "[parameters('secretKeyBase')]"
                            },
                            {
                                "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                                "value": "[parameters('containerStartTimeLimit')]"
                            },
                            {
                                "name": "WEBSITE_SWAP_WARMUP_PING_PATH",
                                "value": "[parameters('warmupPingPath')]"
                            },
                            {
                                "name": "WEBSITE_SWAP_WARMUP_PING_STATUSES",
                                "value": "[parameters('warmupPingStatus')]"
                            },
                            {
                                "name": "WEBSITE_SLOT_POLL_WORKER_FOR_CHANGE_NOTIFICATION",
                                "value": "0"
                            },
                            {
                                "name": "RAILS_SERVE_STATIC_FILES",
                                "value": "[parameters('railsServeStaticFiles')]"
                            },
                            {
                                "name": "GOVUK_NOTIFY_API_KEY",
                                "value": "[parameters('govukNotifyAPIKey')]"
                            },
                            {
                                "name": "BASIC_AUTH_USERNAME",
                                "value": "[parameters('basicAuthUsername')]"
                            },
                            {
                                "name": "BASIC_AUTH_PASSWORD",
                                "value": "[parameters('basicAuthPassword')]"
                            },
                            {
                                "name": "SUPPORT_USERNAME",
                                "value": "[parameters('supportUsername')]"
                            },
                            {
                                "name": "SUPPORT_PASSWORD",
                                "value": "[parameters('supportPassword')]"
                            },
                            {
                                "name": "AUTHORISED_HOSTS",
                                "value": "[variables('rubyAuthHosts')]"
                            },
                            {
                                "name": "CUSTOM_HOSTNAME",
                                "value": "[if(greater(length(parameters('customHostName')), 0), parameters('customHostName'), split(parameters('authorisedHosts'), ',')[0])]"
                            },
                            {
                                "name": "SENTRY_DSN",
                                "value": "[parameters('sentryDSN')]"
                            },
                            {
                                "name": "HOSTING_ENVIRONMENT_NAME",
                                "value": "[parameters('environment')]"
                            },
                            {
                                "name": "LOGSTASH_ENABLE",
                                "value": "[parameters('logstashEnable')]"
                            },
                            {
                                "name": "LOGSTASH_REMOTE",
                                "value": "[parameters('logstashRemote')]"
                            },
                            {
                                "name": "LOGSTASH_HOST",
                                "value": "[parameters('logstashHost')]"
                            },
                            {
                                "name": "LOGSTASH_PORT",
                                "value": "[parameters('logstashPort')]"
                            },
                            {
                                "name": "LOGSTASH_SSL",
                                "value": "[parameters('logstashSsl')]"
                            },
                            {
                                "name": "FIND_BASE_URL",
                                "value": "[parameters('findBaseUrl')]"
                            },
                            {
                                "name": "APPSIGNAL_PUSH_API_KEY",
                                "value": "[parameters('appsignalKey')]"
                            },
                            {
                                "name": "STATE_CHANGE_SLACK_URL",
                                "value": "[parameters('stateChangeSlackUrl')]"
                            },
                            {
                                "name": "SERVICE_TYPE",
                                "value": "web"
                            },
                            {
                                "name": "DFE_SIGN_IN_CLIENT_ID",
                                "value": "[parameters('dfeSignInClientId')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_SECRET",
                                "value": "[parameters('dfeSignInSecret')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_ISSUER",
                                "value": "[parameters('dfeSignInIssuer')]"
                            },
                            {
                                "name": "REDIS_URL",
                                "value": "[concat('rediss://:', listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2018-03-01').primaryKey, '@', parameters('redisCacheName'), '.redis.cache.windows.net:6380')]"
                            }
                        ]
                    }
                }
            },
            "dependsOn": [
                "app-service-plan",
                "app-service-certificate",
                "redis-cache",
		"postgresql-database"
            ]
        },
        {
            "name": "container-instances-worker",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'container-instances.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "containerInstanceName": {
                        "value": "[concat(parameters('containerInstanceNamePrefix'), '-wkr')]"
                    },
                    "containerName": {
                        "value": "[concat(parameters('containerInstanceNamePrefix'), '-wkr')]"
                    },
                    "imageName": {
                        "value": "[variables('containerImageName')]"
                    },
                    "numberCpuCores": {
                        "value": "[parameters('ciWorkerCpus')]"
                    },
                    "memory": {
                        "value": "[parameters('ciWorkerMemory')]"
                    },
		    "command": {
		        "value": ["/bin/sh",  "-c", "bundle exec sidekiq -c 5 -C config/sidekiq.yml"]
		    },
                    "environmentVariables": {
                        "value": [
                            {
                                "name": "RAILS_ENV",
                                "value": "[parameters('railsEnv')]"
                            },
                            {
                                "name": "DB_DATABASE",
                                "value": "[parameters('databaseName')]"
                            },
                            {
                                "name": "DB_HOSTNAME",
                                "value": "[reference('postgresql-server').outputs.fullyQualifiedDomainName.value]"
                            },
                            {
                                "name": "DB_PASSWORD",
                                "secureValue": "[parameters('databasePassword')]"
                            },
                            {
                                "name": "DB_USERNAME",
                                "value": "[concat(parameters('databaseUsername'), '@', variables('databaseServerName'))]"
                            },
                            {
                                "name": "AUTHORISED_HOSTS",
                                "value": "[variables('rubyAuthHosts')]"
                            },
                            {
                                "name": "SECRET_KEY_BASE",
                                "secureValue": "[parameters('secretKeyBase')]"
                            },
                            {
                                "name": "CUSTOM_HOSTNAME",
                                "value": "[if(greater(length(parameters('customHostName')), 0), parameters('customHostName'), split(parameters('authorisedHosts'), ',')[0])]"
                            },
                            {
                                "name": "SENTRY_DSN",
                                "value": "[parameters('sentryDSN')]"
                            },
                            {
                                "name": "HOSTING_ENVIRONMENT_NAME",
                                "value": "[parameters('environment')]"
                            },
                            {
                                "name": "SUPPORT_USERNAME",
                                "value": "[parameters('supportUsername')]"
                            },
                            {
                                "name": "SUPPORT_PASSWORD",
                                "secureValue": "[parameters('supportPassword')]"
                            },
                            {
                                "name": "GOVUK_NOTIFY_API_KEY",
                                "secureValue": "[parameters('govukNotifyAPIKey')]"
                            },
                            {
                                "name": "LOGSTASH_ENABLE",
                                "value": "[parameters('logstashEnable')]"
                            },
                            {
                                "name": "LOGSTASH_REMOTE",
                                "value": "[parameters('logstashRemote')]"
                            },
                            {
                                "name": "LOGSTASH_HOST",
                                "value": "[parameters('logstashHost')]"
                            },
                            {
                                "name": "LOGSTASH_PORT",
                                "value": "[parameters('logstashPort')]"
                            },
                            {
                                "name": "LOGSTASH_SSL",
                                "value": "[parameters('logstashSsl')]"
                            },
                            {
                                "name": "FIND_BASE_URL",
                                "value": "[parameters('findBaseUrl')]"
                            },
                            {
                                "name": "APPSIGNAL_PUSH_API_KEY",
                                "value": "[parameters('appsignalKey')]"
                            },
                            {
                                "name": "STATE_CHANGE_SLACK_URL",
                                "value": "[parameters('stateChangeSlackUrl')]"
                            },
                            {
                                "name": "SERVICE_TYPE",
                                "value": "worker"
                            },
                            {
                                "name": "DFE_SIGN_IN_CLIENT_ID",
                                "value": "[parameters('dfeSignInClientId')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_SECRET",
                                "value": "[parameters('dfeSignInSecret')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_ISSUER",
                                "value": "[parameters('dfeSignInIssuer')]"
                            },
                            {
                                "name": "REDIS_URL",
                                "secureValue": "[concat('rediss://:', listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2018-03-01').primaryKey, '@', parameters('redisCacheName'), '.redis.cache.windows.net:6380')]"
                            }
                        ]
                    }
                }
            },
            "dependsOn": [
                "redis-cache",
		"postgresql-database"
            ]
        },
        {
            "name": "container-instances-clock",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'container-instances.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "containerInstanceName": {
                        "value": "[concat(parameters('containerInstanceNamePrefix'), '-clk')]"
                    },
                    "containerName": {
                        "value": "[concat(parameters('containerInstanceNamePrefix'), '-clk')]"
                    },
                    "imageName": {
                        "value": "[variables('containerImageName')]"
                    },
                    "numberCpuCores": {
                        "value": "[parameters('ciClockCpus')]"
                    },
                    "memory": {
                        "value": "[parameters('ciClockMemory')]"
                    },
		    "command": {
		        "value": ["/bin/sh", "-c", "bundle exec clockwork config/clock.rb"]
		    },
                    "environmentVariables": {
                        "value": [
                            {
                                "name": "RAILS_ENV",
                                "value": "[parameters('railsEnv')]"
                            },
                            {
                                "name": "DB_DATABASE",
                                "value": "[parameters('databaseName')]"
                            },
                            {
                                "name": "DB_HOSTNAME",
                                "value": "[reference('postgresql-server').outputs.fullyQualifiedDomainName.value]"
                            },
                            {
                                "name": "DB_PASSWORD",
                                "secureValue": "[parameters('databasePassword')]"
                            },
                            {
                                "name": "DB_USERNAME",
                                "value": "[concat(parameters('databaseUsername'), '@', variables('databaseServerName'))]"
                            },
                            {
                                "name": "AUTHORISED_HOSTS",
                                "value": "[variables('rubyAuthHosts')]"
                            },
                            {
                                "name": "SECRET_KEY_BASE",
                                "secureValue": "[parameters('secretKeyBase')]"
                            },
                            {
                                "name": "CUSTOM_HOSTNAME",
                                "value": "[if(greater(length(parameters('customHostName')), 0), parameters('customHostName'), split(parameters('authorisedHosts'), ',')[0])]"
                            },
                            {
                                "name": "SENTRY_DSN",
                                "value": "[parameters('sentryDSN')]"
                            },
                            {
                                "name": "HOSTING_ENVIRONMENT_NAME",
                                "value": "[parameters('environment')]"
                            },
                            {
                                "name": "SUPPORT_USERNAME",
                                "value": "[parameters('supportUsername')]"
                            },
                            {
                                "name": "SUPPORT_PASSWORD",
                                "secureValue": "[parameters('supportPassword')]"
                            },
                            {
                                "name": "GOVUK_NOTIFY_API_KEY",
                                "secureValue": "[parameters('govukNotifyAPIKey')]"
                            },
                            {
                                "name": "LOGSTASH_ENABLE",
                                "value": "[parameters('logstashEnable')]"
                            },
                            {
                                "name": "LOGSTASH_REMOTE",
                                "value": "[parameters('logstashRemote')]"
                            },
                            {
                                "name": "LOGSTASH_HOST",
                                "value": "[parameters('logstashHost')]"
                            },
                            {
                                "name": "LOGSTASH_PORT",
                                "value": "[parameters('logstashPort')]"
                            },
                            {
                                "name": "LOGSTASH_SSL",
                                "value": "[parameters('logstashSsl')]"
                            },
                            {
                                "name": "FIND_BASE_URL",
                                "value": "[parameters('findBaseUrl')]"
                            },
                            {
                                "name": "APPSIGNAL_PUSH_API_KEY",
                                "value": "[parameters('appsignalKey')]"
                            },
                            {
                                "name": "STATE_CHANGE_SLACK_URL",
                                "value": "[parameters('stateChangeSlackUrl')]"
                            },
                            {
                                "name": "SERVICE_TYPE",
                                "value": "clock"
                            },
                            {
                                "name": "DFE_SIGN_IN_CLIENT_ID",
                                "value": "[parameters('dfeSignInClientId')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_SECRET",
                                "value": "[parameters('dfeSignInSecret')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_ISSUER",
                                "value": "[parameters('dfeSignInIssuer')]"
                            },
                            {
                                "name": "REDIS_URL",
                                "secureValue": "[concat('rediss://:', listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2018-03-01').primaryKey, '@', parameters('redisCacheName'), '.redis.cache.windows.net:6380')]"
                            }
                        ]
                    }
                }
            },
            "dependsOn": [
                "redis-cache",
		"postgresql-database"
            ]
        },
        {
            "name": "app-service-logs",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'app-service-logs.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appServiceName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "httpLoggingEnabled": {
                        "value": true
                    },
                    "detailedErrorLoggingEnabled": {
                        "value": true
                    },
                    "applicationLogsFileSystem": {
                        "value": "Verbose"
                    }
                }
            },
            "dependsOn": [
                "app-service"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "app-insights",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'application-insights.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appInsightsName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "attachedService": {
                        "value": "[variables('appServiceName')]"
                    },
                    "availabilityTests": {
                        "value": "[variables('availabilityTests')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-server",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "postgresServerName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "postgresAdminLogin": {
                        "value": "[parameters('databaseUsername')]"
                    },
                    "postgresAdminPassword": {
                        "value": "[parameters('databasePassword')]"
                    },
                    "securityAlertEmailAddress": {
                        "value": "[parameters('securityAlertEmail')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    },
                    "storageAutoGrow": {
                        "value": "[parameters('databaseStorageAutoGrow')]"
                    },
                    "backupRetentionDays": {
                        "value": "[parameters('databaseBackupRetentionDays')]"
                    }
                }
            },
            "dependsOn": [
                "storage-account"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-database",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-database.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "serverName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "databaseName": {
                        "value": "[parameters('databaseName')]"
                    }
                }
            },
            "dependsOn": [
                "postgresql-server"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-server-firewall-rules",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server-firewall-rules.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "firewallRuleNamePrefix": {
                        "value": "AZURE_IP-"
                    },
                    "ipAddresses": {
                        "value": "[reference('app-service').outputs.possibleOutboundIpAddresses.value]"
                    },
                    "serverName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "allowAzureServicesAccess": {
                        "value": true
                    }
                }
            },
            "dependsOn": [
                "postgresql-server"
            ]
        },
        {
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('databaseServerName'), '/Microsoft.Authorization/DbProtection')]",
            "type": "Microsoft.DBforPostgreSQL/servers/providers/locks",
            "properties": {
                "level": "CanNotDelete",
                "notes": "Prevents accidental deletion of the Postgres database and its backups."
            },
            "dependsOn": [
                "postgresql-database",
                "postgresql-server-firewall-rules"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "infrastructure-dashboard",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'dashboard.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceGroupName": {
                        "value": "[variables('resourceNamePrefix')]"
                    },
                    "serviceName": {
                        "value": "[parameters('serviceName')]"
                    },
                    "environment": {
                        "value": "[parameters('environment')]"
                    },
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "appServiceName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "databaseServerName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "redisCacheName": {
                        "value": "[parameters('redisCacheName')]"
                    },
                    "containerInstances": {
                        "value": [
                            "[concat(parameters('containerInstanceNamePrefix'), '-clk')]",
                            "[concat(parameters('containerInstanceNamePrefix'), '-wkr')]"
                        ]
                    }
                }
            },
            "dependsOn": [
                "redis-cache",
                "app-service",
                "container-instances-worker",
                "container-instances-clock",
                "app-insights",
                "postgresql-server"
            ]
        }
    ],
    "outputs": {
        "AppServiceName": {
            "type": "string",
            "value": "[variables('appServiceName')]"
        }
    }
}
