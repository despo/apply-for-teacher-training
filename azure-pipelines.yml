trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

variables:
- group: Docker Shared variables
- group: APPLY - Shared Variables
- name: imageName
  value: 'apply-for-postgraduate-teacher-training'
- name: debug
  value: true
- name: deployOnly
  value: false
- name: BUNDLE_PATH
  value: $(Pipeline.Workspace)/.bundle
- name: YARN_CACHE_PATH
  value: $(Pipeline.Workspace)/.yarn

stages:
- stage: build_test_release
  displayName: 'Build, Test & Release'
  variables:
  - group: APPLY - ENV - QA
  jobs:
  - job: build_and_test_docker_image
    displayName: 'Build & Test Docker Image'
    pool:
      vmImage: 'Ubuntu-16.04'

    variables:
    - name: system.debug
      value: $(debug)

    steps:
    - script: |
        GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
        docker_path=$(dockerHubUsername)/$(imageName)
        echo '##vso[task.setvariable variable=compose_file]docker-compose.yml:docker-compose.azure.yml'
        echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
        echo "##vso[task.setvariable variable=docker_path;]$docker_path"
        mkdir $(BUNDLE_PATH)
        mkdir $(YARN_CACHE_PATH)
      displayName: 'Set version number'

    - task: UseRubyVersion@0
      inputs:
        versionSpec: '=2.6.5'
        addToPath: true

    - task: Cache@2
      inputs:
        key: 'gems | "$(Agent.OS)" | Gemfile.lock'
        restoreKeys: |
          gems | "$(Agent.OS)"
          gems
        path: $(BUNDLE_PATH)
      displayName: Cache gems

    - task: Cache@2
      inputs:
        key: 'yarn | "$(Agent.OS)" | yarn.lock'
        restoreKeys: |
          yarn | "$(Agent.OS)"
        path: $(YARN_CACHE_PATH)
      displayName: Cache Yarn packages

    - script: |
        sudo apt-get -y install build-essential yarn nodejs git graphviz ttf-ubuntu-font-family
        gem install bundler -v 2.1.4
        bundle install
        #yarn install --modules-folder $(YARN_CACHE_PATH)
      env:
        BUNDLE_PATH: $(BUNDLE_PATH)
      displayName: Bundle & Yarn install

    - script: make setup
      displayName: 'Build & setup'
      condition: and(succeeded(), eq(variables['deployOnly'], false))
      env:
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        railsSecretKeyBase: $(railsSecretKeyBase)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

    - script: make ci.lint-ruby
      name: ci_lint_ruby
      displayName: 'Rubocop'
      condition: and(succeeded(), eq(variables['deployOnly'], false))
      env:
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

    - script: |
        make ci.cucumber
        test_result=$?
        if [ "$test_result" == "0" ]
        then
          if [ $(find results/ -type f -name TEST*.xml | wc -l) -gt 0 ]
          then
            errors=0
            warnings=0

            for line in $(grep "^<testsuite " results/TEST*.xml)
            do
              if [[ $line == failure* ]]
              then
                test_failures=$(echo $line | cut -d '"' -f2)
                errors=$((errors+test_failures))
              fi
              if [[ $line == error* ]]
              then
                test_errors=$(echo $line | cut -d '"' -f2)
                errors=$((errors+test_errors))
              fi
              if [[ $line == skipped* ]]
              then
                test_skipped=$(echo $line | cut -d '"' -f2)
                warnings=$((warning+test_skipped))
              fi
            done

            if [ $errors -gt 0 ]
            then
              echo "##vso[task.logissue type=error]One or more cucumber tests failed."
              exit 1
            fi
            if [ $warnings -gt 0 ]
            then
              echo "##vso[task.logissue type=warning]One or more cucumber tests were skipped."
            fi

          else
            echo "##vso[task.logissue type=error]Cucumber test result files not found."
            exit 1
          fi
          exit 0
        else
          echo "##vso[task.logissue type=error]Cucumber test task exited abnormally."
          exit 1
        fi
      name: ci_cucumber
      displayName: 'Cucumber specs'
      condition: and(succeededOrFailed(), eq(variables['deployOnly'], false))
      env:
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

    - script: |
        make ci.test
        test_result=$?
        if [ "$test_result" == "0" ]
        then
          if [ -f results/rspec-results.xml ]
          then
            if [ $(grep "^<testsuite name=\"rspec\"" results/rspec-results.xml | cut -d' ' -f5 | cut -d'"' -f2) -gt 0 ]
            then
              echo "##vso[task.logissue type=error]One or more rspec tests failed"
              exit 1
            fi
            if [ $(grep "^<testsuite name=\"rspec\"" results/rspec-results.xml | cut -d' ' -f4 | cut -d'"' -f2) -gt 0 ]
            then
              echo "##vso[task.logissue type=warning]One or more rspec tests were skipped"
              exit 1
            fi
          else
            echo "##vso[task.logissue type=error]rspec-results file not found."
            exit 1
          fi
          exit 0
        else
          echo "##vso[task.logissue type=error]Rspec test task exited abnormally."
          exit 1
        fi
      name: ci_test
      displayName: 'Execute tests'
      condition: and(succeededOrFailed(), eq(variables['deployOnly'], false))
      env:
        dockerHubUsername: $(dockerHubUsername)
        dockerHubImageName: $(imageName)
        RAILS_ENV: test
        GOVUK_NOTIFY_API_KEY: $(govukNotifyAPIKey)
        AUTHORISED_HOSTS: $(authorisedHosts)
        FIND_BASE_URL: $(findBaseUrl)
        GOVUK_NOTIFY_CALLBACK_API_KEY: $(govukNotifyCallbackAPIKey)
        SANDBOX: $(sandbox)

    - task: Docker@1
      displayName: Tag image with current build number $(Build.BuildNumber)
      condition: and(succeeded(), eq(variables['deployOnly'], false))
      inputs:
        command: Tag image
        imageName: "$(docker_path):latest"
        arguments: "$(docker_path):$(Build.BuildNumber)"

    - task: Docker@1
      displayName: Docker Hub login
      condition: and(succeeded(), eq(variables['deployOnly'], false))
      inputs:
        command: "login"
        containerregistrytype: Container Registry
        dockerRegistryEndpoint: DfE Docker Hub

    - task: Docker@1
      displayName: Push tagged image
      condition: and(succeeded(), eq(variables['deployOnly'], false))
      inputs:
        command: Push an image
        imageName: "$(docker_path):$(Build.BuildNumber)"

    - task: Docker@1
      displayName: Push tagged image (latest) if master or hotfix
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/hotfix')))
      inputs:
        command: Push an image
        imageName: "$(docker_path):latest"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifacts'
      inputs:
        path: '$(System.DefaultWorkingDirectory)/azure/'
        artifactName: 'arm_template'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: and(succeededOrFailed(), eq(variables['deployOnly'], false))
      inputs:
        testRunner: JUnit
        testResultsFiles: 'results/*.xml'


- stage: deploy_qa
  displayName: 'Deploy - QA'
  dependsOn: build_test_release
  condition: and(succeeded('build_test_release'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
  - group: APPLY - ENV - QA
  jobs:
  - template: azure-pipelines-deploy-template.yml
    parameters:
      debug: $(debug)
      subscriptionPrefix: 's106'
      subscriptionName: 'Apply (106) - Dev'
      environment: 'qa'
      resourceEnvironmentName: 'd01'
      serviceName: 'apply'
      redisCacheSKU: 'Premium'
      redisCacheFamily: 'P'
      containerImageReference: '$(imageName):$(build.buildNumber)'
      keyVaultName: 's106d01-shared-kv-01'
      keyVaultResourceGroup: 's106d01-shared-rg'
      customHostName: '$(govukHostname)'
      databaseName: 'apply'
      databaseUsername: 'applyadm512'
      databasePassword: '$(databasePassword)'
      databaseStorageAutoGrow: 'disabled'
      databaseBackupRetentionDays: 7
      dockerhubUsername: '$(dockerHubUsername)'
      containerStartTimeLimit: '$(appServiceContainerTimeoutSeconds)'
      railsSecretKeyBase: '$(railsSecretKeyBase)'
      railsEnv: 'production'
      basicAuthEnabled: '$(basicAuthEnabled)'
      basicAuthUsername: '$(basicAuthUsername)'
      basicAuthPassword: '$(basicAuthPassword)'
      supportUsername: '$(supportUsername)'
      supportPassword: '$(supportPassword)'
      authorisedHosts: '$(authorisedHosts)'
      sentryDSN: '$(sentryDSN)'
      logstashEnable: '$(logstashEnable)'
      logstashRemote: '$(logstashRemote)'
      logstashHost: '$(logstashHost)'
      logstashPort: '$(logstashPort)'
      logstashSsl: '$(logstashSsl)'
      govukNotifyAPIKey: '$(govukNotifyAPIKey)'
      findBaseUrl: '$(findBaseUrl)'
      dfeSignInClientId: '$(dfeSignInClientId)'
      dfeSignInSecret: '$(dfeSignInSecret)'
      dfeSignInIssuer: '$(dfeSignInIssuer)'
      stateChangeSlackUrl: '$(stateChangeSlackUrl)'
      customAvailabilityMonitors: '$(customAvailabilityMonitors)'
      alertRecipientEmails: '$(alertRecipientEmails)'
      alertSlackChannel: '$(alertSlackChannel)'
      govukNotifyCallbackAPIKey: $(govukNotifyCallbackAPIKey)
      dsiApiUrl: '$(dsiApiUrl)'
      dsiApiSecret: '$(dsiApiSecret)'
      sandbox: '$(sandbox)'


- stage: deploy_devops
  displayName: 'Deploy - DevOps'
  dependsOn: build_test_release
  condition: and(succeeded('build_test_release'), eq(variables['Build.SourceBranchName'], variables.devDeployBranchNameOverride))
  variables:
  - group: APPLY - ENV - DevOps
  jobs:
  - template: azure-pipelines-deploy-template.yml
    parameters:
      debug: $(debug)
      subscriptionPrefix: 's106'
      subscriptionName: 'Apply (106) - Dev'
      environment: 'devops'
      resourceEnvironmentName: 'd02'
      serviceName: 'apply'
      ${{ if eq(variables['deployOnly'], true) }}:
        containerImageReference: '$(imageName):latest'
      ${{ if eq(variables['deployOnly'], false) }}:
        containerImageReference: '$(imageName):$(build.buildNumber)'
      keyVaultName: 's106d01-shared-kv-01'
      keyVaultResourceGroup: 's106d01-shared-rg'
      databaseName: 'apply'
      databaseUsername: 'applyadm512'
      databasePassword: '$(databasePassword)'
      databaseStorageAutoGrow: 'disabled'
      databaseBackupRetentionDays: 7
      dockerhubUsername: '$(dockerHubUsername)'
      containerStartTimeLimit: '$(appServiceContainerTimeoutSeconds)'
      railsSecretKeyBase: '$(railsSecretKeyBase)'
      railsEnv: 'production'
      basicAuthEnabled: '$(basicAuthEnabled)'
      basicAuthUsername: '$(basicAuthUsername)'
      basicAuthPassword: '$(basicAuthPassword)'
      supportUsername: '$(supportUsername)'
      supportPassword: '$(supportPassword)'
      authorisedHosts: '$(authorisedHosts)'
      sentryDSN: '$(sentryDSN)'
      logstashEnable: '$(logstashEnable)'
      logstashRemote: '$(logstashRemote)'
      logstashHost: '$(logstashHost)'
      logstashPort: '$(logstashPort)'
      logstashSsl: '$(logstashSsl)'
      govukNotifyAPIKey: '$(govukNotifyAPIKey)'
      findBaseUrl: '$(findBaseUrl)'
      dfeSignInClientId: '$(dfeSignInClientId)'
      dfeSignInSecret: '$(dfeSignInSecret)'
      dfeSignInIssuer: '$(dfeSignInIssuer)'
      stateChangeSlackUrl: '$(stateChangeSlackUrl)'
      customAvailabilityMonitors: '$(customAvailabilityMonitors)'
      alertRecipientEmails: '$(alertRecipientEmails)'
      alertSlackChannel: '$(alertSlackChannel)'
      govukNotifyCallbackAPIKey: '$(govukNotifyCallbackAPIKey)'
      dsiApiUrl: '$(dsiApiUrl)'
      dsiApiSecret: '$(dsiApiSecret)'
      sandbox: '$(sandbox)'
